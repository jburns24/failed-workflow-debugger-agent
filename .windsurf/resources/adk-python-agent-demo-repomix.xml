This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
lib/
  agents/
    farewell_agent/
      __init__.py
      agent.py
    greetings_agent/
      __init__.py
      agent.py
specialized-agent-demo/
  __init__.py
  agent.py
.gitignore
.python-version
main.py
pyproject.toml
Taskfile.yml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="lib/agents/farewell_agent/__init__.py">
from .agent import farewell_agent

__all__ = ["farewell_agent"]
</file>

<file path="lib/agents/farewell_agent/agent.py">
from google.adk.agents import Agent
from typing import Optional
from google.adk.models.lite_llm import LiteLlm
from google.adk.tools.tool_context import ToolContext

MODEL_OPENAI_GPT_4_1 = "openai/gpt-4.1"

def say_goodbye(name: Optional[str] = None, tool_context: ToolContext = None) -> str:
    """Provides a simple farewell. If a name is provided, it will be used.

    Args:
        name (str, optional): The name of the person to farewell. Defaults to a generic farewell if not provided.

    Returns:
        str: A friendly farewell message.
    """
    name_from_session = tool_context.state.get("user:name")
    print(f"--- Tool: say_goodbye called with name_from_session: {name_from_session} ---")
    if name_from_session:
        greeting = f"Goodbye stinky!"
        print(f"--- Tool: say_goodbye called with name: {name_from_session} ---")
    else:
        greeting = "Goodbye there!" # Default greeting if name is None or not explicitly passed
        print(f"--- Tool: say_goodbye called without a specific name (name_arg_value: {name}) ---")
    return greeting

farewell_agent = Agent(
    model = LiteLlm(model=MODEL_OPENAI_GPT_4_1),
    name="farewell_agent",
    instruction="You are the Farewell Agent. Your ONLY task is to provide a friendly farewell to the user. "
                "Use the 'say_goodbye' tool to generate the farewell. "
                "If the user provides their name, make sure to pass it to the tool. "
                "Do not engage in any other conversation or tasks.",
    description="Handles simple farewells and goodbyes using the 'say_goodbye' tool.", # Crucial for delegation
    tools=[say_goodbye],
)
</file>

<file path="lib/agents/greetings_agent/__init__.py">
from .agent import greeting_agent

__all__ = ["greeting_agent"]
</file>

<file path="lib/agents/greetings_agent/agent.py">
from google.adk.agents import Agent
from typing import Optional
from google.adk.tools.tool_context import ToolContext

MODEL_GEMINI_2_0_FLASH = "gemini-2.0-flash"

def say_hello(name: Optional[str] = None, tool_context: ToolContext = None) -> str:
    """Provides a simple greeting. If a name is provided, it will be used.

    Args:
        name (str, optional): The name of the person to greet. Defaults to a generic greeting if not provided.

    Returns:
        str: A friendly greeting message.
    """
    if name:
        greeting = f"Hello, {name}!"
        tool_context.state[f"user:name"] = "Tony"
        print(f"--- Tool: say_hello called with name: {name} ---")
    else:
        greeting = "Hello there!" # Default greeting if name is None or not explicitly passed
        print(f"--- Tool: say_hello called without a specific name (name_arg_value: {name}) ---")
    return greeting

greeting_agent = Agent(
    # Using a potentially different/cheaper model for a simple task
    model = MODEL_GEMINI_2_0_FLASH,
    # model=LiteLlm(model=MODEL_GPT_4O), # If you would like to experiment with other models
    name="greeting_agent",
    instruction="You are the Greeting Agent. Your ONLY task is to provide a friendly greeting to the user. "
                "Use the 'say_hello' tool to generate the greeting. "
                "If the user provides their name, make sure to pass it to the tool. "
                "Do not engage in any other conversation or tasks.",
    description="Handles simple greetings and hellos using the 'say_hello' tool.", # Crucial for delegation
    tools=[say_hello],
)
</file>

<file path="specialized-agent-demo/__init__.py">
from .agent import root_agent

__all__ = ["root_agent"]
</file>

<file path="specialized-agent-demo/agent.py">
import datetime
from zoneinfo import ZoneInfo
from google.adk.models.lite_llm import LiteLlm
from google.adk.agents import Agent
from lib.agents.farewell_agent import farewell_agent
from lib.agents.greetings_agent import greeting_agent
from google.adk.sessions import InMemorySessionService
from google.adk.runners import Runner

# Model IDs need to match what LiteLlm expects. https://docs.litellm.ai/docs/providers
MODEL_GEMINI_2_0_FLASH = "gemini/gemini-2.0-flash"
MODEL_OPENAI_GPT_4_1 = "openai/gpt-4.1"
MODEL_CLAUDE_SONNET = "anthropic/claude-sonnet-4-20250514"


session_service = InMemorySessionService()

def get_weather(city: str) -> dict:
    """Retrieves the current weather report for a specified city.

    Args:
        city (str): The name of the city for which to retrieve the weather report.

    Returns:
        dict: status and result or error msg.
    """
    if city.lower() == "new york":
        return {
            "status": "success",
            "report": (
                "The weather in New York is sunny with a temperature of 25 degrees"
                " Celsius (77 degrees Fahrenheit)."
            ),
        }
    else:
        return {
            "status": "error",
            "error_message": f"Weather information for '{city}' is not available.",
        }


def get_current_time(city: str) -> dict:
    """Returns the current time in a specified city.

    Args:
        city (str): The name of the city for which to retrieve the current time.

    Returns:
        dict: status and result or error msg.
    """

    if city.lower() == "new york":
        tz_identifier = "America/New_York"
    else:
        return {
            "status": "error",
            "error_message": (
                f"Sorry, I don't have timezone information for {city}."
            ),
        }

    tz = ZoneInfo(tz_identifier)
    now = datetime.datetime.now(tz)
    report = (
        f'The current time in {city} is {now.strftime("%Y-%m-%d %H:%M:%S %Z%z")}'
    )
    return {"status": "success", "report": report}


#  Ensure the root agent's instructions clearly guide its delegation decisions. Mention the sub-agents by name and describe the conditions under which delegation should occur.
weather_agent_team = Agent(
    name="weather_agent_v2", # Give it a new version name
    model=LiteLlm(model=MODEL_GEMINI_2_0_FLASH),
    description="The main coordinator agent. Handles weather requests and delegates greetings/farewells to specialists.",
    instruction="You are the main Weather Agent coordinating a team. Your primary responsibility is to provide weather information. "
                "Use the 'get_weather' tool ONLY for specific weather requests (e.g., 'weather in London'). "
                "You have specialized sub-agents: "
                "1. 'greeting_agent': Handles simple greetings like 'Hi', 'Hello'. Delegate to it for these. "
                "2. 'farewell_agent': Handles simple farewells like 'Bye', 'See you'. Delegate to it for these. "
                "Analyze the user's query. If it's a greeting, delegate to 'greeting_agent'. If it's a farewell, delegate to 'farewell_agent'. "
                "If it's a weather request, handle it yourself using 'get_weather'. "
                "For anything else, respond appropriately or state you cannot handle it.",
    tools=[get_weather], # Root agent still needs the weather tool for its core task
    # Link the sub-agents here
    sub_agents=[greeting_agent, farewell_agent],
    output_key="last_weather_response",
)

# Google ADK NEEDS a root agent so the orchestrator must be named root_agent
root_agent = weather_agent_team

runner_root = Runner(
    agent=root_agent,
    app_name="specialized-agent-demo",
    session_service=session_service # Use the NEW stateful session service
)
</file>

<file path=".gitignore">
# Python-generated files
__pycache__/
*.py[oc]
build/
dist/
wheels/
*.egg-info

# Virtual environments
.venv

# Environment files
.env
*.env.*
# Allow .env.example
!.env.example
</file>

<file path=".python-version">
3.13
</file>

<file path="main.py">
def main():
    print("Hello from adk-python-agent-demo!")


if __name__ == "__main__":
    main()
</file>

<file path="pyproject.toml">
[project]
name = "adk-python-agent-demo"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "google-adk>=1.6.1",
    "litellm>=1.74.2",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "pytest>=8.4.1",
]
</file>

<file path="Taskfile.yml">
version: '3'

tasks:
  # Create/refresh the uv-managed virtual environment
  venv:
    desc: Create or recreate the .venv using uv
    cmds:
      - uv venv

  # Run the application
  run:
    desc: Execute main.py inside the uv virtualenv
    deps: [venv]
    cmds:
      - uv run python main.py

  # Run the test suite (pytest)
  test:
    desc: Run pytest test suite
    deps: [venv]
    cmds:
      - uv run pytest

  # Format code with Black (in-place)
  format:
    desc: Format the codebase using Black
    deps: [venv]
    cmds:
      - uv run black .

  # Check formatting without writing changes
  format-check:
    desc: Verify Black formatting (CI friendly)
    deps: [venv]
    cmds:
      - uv run black --check .

  # Update all dependencies to latest compatible versions
  upgrade:
    desc: Upgrade all project dependencies
    deps: [venv]
    cmds:
      - uv pip upgrade --latest

  # Build wheels and sdist
  build:
    desc: Build distribution artifacts using uv
    deps: [venv]
    cmds:
      - uv build
</file>

</files>
